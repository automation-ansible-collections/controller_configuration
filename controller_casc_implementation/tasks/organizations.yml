---
- block:
  - name: "Read Organization definitions"
    include_vars:
      file: "{{ item.src }}"
    with_filetree: "{{ dir_orgs_vars }}/env/common/controller_organizations.d/"
    when: item.state == 'file'
    register: contents

  - name: "Populate Organizations list"
    set_fact:
      populate_controller_organizations: "{{ (populate_controller_organizations | default([])) + item.ansible_facts.controller_organizations }}"
    loop: "{{ contents.results }}"
    when: contents.results is defined and item.ansible_facts.controller_organizations is defined

  - name: "Set Projects Data Structure"
    set_fact:
      controller_organizations: "{{ populate_controller_organizations }}"
    when: populate_controller_organizations is defined

  when: orgs is defined and dir_orgs_vars is defined

#- name: "Configure Controller Organizations"
#  import_role:
#    name: redhat_cop.controller_configuration.organizations

- name: Add organizations
  ansible.controller.organization:
    name:                               "{{ __controller_organizations_item.name | mandatory }}"
    description:                        "{{ __controller_organizations_item.description | default(omit, true) }}"
    custom_virtualenv:                  "{{ __controller_organizations_item.custom_virtualenv | default(omit, true) }}"
    max_hosts:                          "{{ __controller_organizations_item.max_hosts | default(omit, true) }}"
    instance_groups:                    "{{ __controller_organizations_item.instance_groups | default(omit, true) }}"
    default_environment:                "{{ __controller_organizations_item.default_environment | default(omit, true) }}"
    galaxy_credentials:                 "{{ (__controller_organizations_item.galaxy_credentials | default(omit)) if (assign_galaxy_credentials_to_org is defined and assign_galaxy_credentials_to_org) else omit }}"
    notification_templates_approvals:   "{{ __controller_organizations_item.notification_templates_approvals | default(__controller_organizations_item.related.notification_templates_approvals | default([]) | map(attribute='name') | list ) }}"
    notification_templates_started:     "{{ __controller_organizations_item.notification_templates_started | default(__controller_organizations_item.related.notification_templates_started | default([]) | map(attribute='name') | list ) }}"
    notification_templates_success:     "{{ __controller_organizations_item.notification_templates_success | default(__controller_organizations_item.related.notification_templates_success | default([]) | map(attribute='name') | list ) }}"
    notification_templates_error:       "{{ __controller_organizations_item.notification_templates_error | default(__controller_organizations_item.related.notification_templates_error | default([]) | map(attribute='name') | list ) }}"
    state:                              "{{ __controller_organizations_item.state | default(controller_state | default('present')) }}"

    # Role Standard Options
    controller_username:                "{{ controller_username | default(omit, true) }}"
    controller_password:                "{{ controller_password | default(omit, true) }}"
    controller_oauthtoken:              "{{ controller_oauthtoken | default(omit, true) }}"
    controller_host:                    "{{ controller_hostname | default(omit, true) }}"
    controller_config_file:             "{{ controller_config_file | default(omit, true) }}"
    validate_certs:                     "{{ controller_validate_certs | default(omit) }}"
  loop: "{{ controller_organizations }}"
  loop_control:
    loop_var: __controller_organizations_item
  async: 1000
  poll: 0
  register: __organizations_job_async
  no_log: "{{ controller_configuration_organizations_secure_logging | default(false) }}"

- name: "Configure Controller Organizations | Wait for finish the organization creation"
  async_status:
    jid: "{{ __organizations_job_async_results_item.ansible_job_id }}"
  register: __organizations_job_async_result
  until: __organizations_job_async_result.finished
  retries: 10
  loop: "{{ __organizations_job_async.results }}"
  loop_control:
    loop_var: __organizations_job_async_results_item
  when: __organizations_job_async_results_item.ansible_job_id is defined
  no_log: "{{ controller_configuration_organizations_secure_logging | default(false) }}"
...
...
