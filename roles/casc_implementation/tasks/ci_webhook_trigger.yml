---
- name: "Get the modified files over the dirs from all the received commits"
  set_fact:
    env: "{{ tower_webhook_payload.ref.split('/')[2] }}"
    orgs: "{{ tower_webhook_payload.project.name }}"
    list_of_dirs: "{{ ((tower_webhook_payload.commits | map(attribute='added') | list) +
                       (tower_webhook_payload.commits | map(attribute='modified') | list) +
                       (tower_webhook_payload.commits | map(attribute='removed') | list))
                   | flatten }}"
- name: "Get the Organization and the tags to run the CasC"
  set_fact:
    org_dirs_dict: "{{ (org_dirs_dict | default({})) | combine({input_var[0]: (((org_dirs_dict[input_var[0]] | default([])) + [input_var[1]] ) | unique ) }) }}"
  vars:
    #input_var: "{{ item | regex_search('/([^/]*)/env/(?:[^/]*)/configure_controller_(.*).ya?ml', '\\1', '\\2') }}"
    input_var: "{{ item | regex_search('/([^/]*)/env/(?:[^/]*)/controller_(.*).d/', '\\1', '\\2') }}"
  loop: "{{ list_of_dirs }}"
  when: input_var | type_debug is match('list')

- debug: var=org_dirs_dict

#- name: "Run the CasC_JobTemplates_AAP_CI_Config_Controller Automation Platform Job to update the objects"
#  import_role:
#    name: redhat_cop.controller_configuration.job_launch

- name: "Run the CasC_JobTemplates_AAP_CI_Config_Controller Automation Platform Job to update the objects"
  ansible.controller.job_launch:
    controller_host: '{{ lookup("env", "CONTROLLER_HOST") | default(lookup("env", "TOWER_HOST"),true) }}'
    controller_username: '{{ lookup("env", "CONTROLLER_USERNAME") | default(lookup("env", "TOWER_USERNAME"),true) }}'
    controller_password: '{{ lookup("env", "CONTROLLER_PASSWORD") | default(lookup("env", "TOWER_PASSWORD"),true) }}'
    validate_certs: '{{ lookup("env", "CONTROLLER_VERIFY_SSL") | default(lookup("env", "TOWER_VERIFY_SSL"),true) | default(false,true) }}'
    name: "{{ org_tags.key }} CasC_JobTemplates_AAP_CI_Config_Controller"
    extra_vars:
      orgs: "{{ org_tags.key }}"
      dir_orgs_vars: 'orgs_vars'
      ansible_python_interpreter: "/usr/bin/python3"
      env: "{{ env }}"
    tags: "{{ org_tags.value }}"
    wait: yes
    verbosity: 0
  with_dict: "{{ org_dirs_dict }}"
  loop_control:
    loop_var: org_tags
  when: org_dirs_dict is defined
...
