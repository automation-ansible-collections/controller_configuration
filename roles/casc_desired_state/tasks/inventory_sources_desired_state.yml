---
- block:
    - name: "Read Inventory Source definitions"
      include_vars:
        file: "{{ item.src }}"
      with_filetree: "{{ dir_orgs_vars }}/{{ orgs }}/env/{{ env }}/controller_inventory_sources.d/"
      when: item.state == 'file'
      register: contents

    - name: "Populate Inventory Source list"
      set_fact:
        populate_controller_inventory_sources: "{{ (populate_controller_inventory_sources | default([])) + item.ansible_facts.controller_inventory_sources }}"
      loop: "{{ contents.results }}"
      when: contents.results is defined and item.ansible_facts.controller_inventory_sources is defined

    - name: "Set Inventory Source Data Structure"
      set_fact:
        controller_inventory_sources: "{{ populate_controller_inventory_sources }}"
      when: populate_controller_inventory_sources is defined

  when: dir_orgs_vars is defined and orgs is defined and env is defined

- block:
    - name: "DESIRED STATE: Get the current controller inventories_sources"
      ansible.controller.export:
        controller_username:                "{{ controller_username | default(omit, true) }}"
        controller_password:                "{{ controller_password | default(omit, true) }}"
        controller_oauthtoken:              "{{ controller_oauthtoken | default(omit, true) }}"
        controller_host:                    "{{ controller_hostname | default(omit, true) }}"
        controller_config_file:             "{{ controller_config_file | default(omit, true) }}"
        validate_certs:                     "{{ controller_validate_certs | default(omit) }}"
        inventory_sources: 'all'
      register: current_inventory_sources_for_inventory_sources

    - name: "DESIRED STATE: Map the currently existing information"
      set_fact:
        current_info_for_inventory_sources: "{{ (current_info_for_inventory_sources | default([])) + [{ 'inventory': inventory_source_item.inventory.name, 'inventory_source': inventory_source_item.name}] }}"
      loop: "{{ current_inventory_sources_for_inventory_sources.assets.inventory_sources }}"
      loop_control:
        loop_var: inventory_source_item

    - block:
        - name: "DESIRED STATE: Show the currently existing hosts associated with it's inventories"
          debug:
            msg:
              - "Current Info: {{ current_info_for_inventory_sources }}"
              - "CasC inventory_sources: {{ controller_inventory_sources }}"

        - name: "DESIRED STATE: Show the inventory sources not in CasC"
          debug:
            msg:
              - "Inventory name: {{ current_info_item_for_inventory_sources.inventory }}"
              - "Inventory Source name: {{ current_info_item_for_inventory_sources.inventory_source }}"
          vars:
            inventory_index: "{{ lookup('ansible.utils.index_of', data=controller_inventory_sources, test='match', value=current_info_item_for_inventory_sources.inventory, key='inventory', fail_on_missing='true', wantlist=True) }}"
            inventory_source_index: "{{ lookup('ansible.utils.index_of', data=controller_inventory_sources, test='match', value='^'+current_info_item_for_inventory_sources.inventory_source+'$', key='name', fail_on_missing='true', wantlist=True) }}"
          loop: "{{ current_info_for_inventory_sources }}"
          loop_control:
            loop_var: current_info_item_for_inventory_sources
          when: (inventory_source_index | intersect(inventory_index)) == []

        - name: "DESIRED STATE: Remove the hosts not in CasC"
          ansible.controller.inventory_source:
            controller_username:                "{{ controller_username | default(omit, true) }}"
            controller_password:                "{{ controller_password | default(omit, true) }}"
            controller_oauthtoken:              "{{ controller_oauthtoken | default(omit, true) }}"
            controller_host:                    "{{ controller_hostname | default(omit, true) }}"
            controller_config_file:             "{{ controller_config_file | default(omit, true) }}"
            validate_certs:                     "{{ controller_validate_certs | default(omit) }}"
            name: "{{ remove_inventory_sources_item.inventory_source }}"
            inventory: "{{ remove_inventory_sources_item.inventory }}"
            state: absent
          vars:
            inventory_index: "{{ lookup('ansible.utils.index_of', data=controller_inventory_sources, test='match', value=remove_inventory_sources_item.inventory, key='inventory', fail_on_missing='true', wantlist=True) }}"
            inventory_source_index: "{{ lookup('ansible.utils.index_of', data=controller_inventory_sources, test='match', value='^'+remove_inventory_sources_item.inventory_source+'$', key='name', fail_on_missing='true', wantlist=True) }}"
          loop: "{{ current_info_for_inventory_sources }}"
          loop_control:
            loop_var: remove_inventory_sources_item
          when: (inventory_source_index | intersect(inventory_index)) == []

      when: current_info_for_inventory_sources is defined

  when:
    - desired_state is defined
    - desired_state | bool
...
