---
# tasks file for controller_credentials
- block:
    - name: "Read Galaxy Credentials definitions"
      include_vars:
        file: "{{ item.src }}"
      with_filetree: "{{ dir_orgs_vars }}/env/{{ env }}/controller_galaxy_credentials.d/"
      when: item.state == 'file'
      register: contents

    - name: "Populate Galaxy Credentials list"
      set_fact:
        populate_controller_galaxy_credentials: "{{ (populate_controller_galaxy_credentials | default([])) + item.ansible_facts.controller_credentials }}"
      loop: "{{ contents.results }}"
      when: contents.results is defined and item.ansible_facts.controller_credentials is defined

    - name: "Set Projects Data Structure"
      set_fact:
        controller_credentials: "{{ populate_controller_galaxy_credentials }}"
      when: populate_controller_credentials is defined

  when: dir_orgs_vars is defined and orgs is defined and env is defined

- name: "DESIRED STATE: Get the current controller credentials"
  ansible.controller.export:
    controller_username:                "{{ controller_username | default(omit, true) }}"
    controller_password:                "{{ controller_password | default(omit, true) }}"
    controller_oauthtoken:              "{{ controller_oauthtoken | default(omit, true) }}"
    controller_host:                    "{{ controller_hostname | default(omit, true) }}"
    controller_config_file:             "{{ controller_config_file | default(omit, true) }}"
    validate_certs:                     "{{ controller_validate_certs | default(omit) }}"
    credentials: 'all'
  register: current_credentials

- name: "DESIRED STATE: Show the currently existing credentials"
  debug:
    msg: "{{ item.name }} -> {{ item.organization.name | default('NO_ORGANIZATION') }}"
  loop: "{{ current_credentials.assets.credentials }}"

- name: "DESIRED STATE: Map the currently existing information"
  set_fact:
    current_info_for_credentials: "{{ (current_info_for_credentials | default([])) + [{ 'credential': credential_item.name, 'credential_type': credential_item.credential_type.name, 'organization': (credential_item.organization.name | default('NO_ORGANIZATION'))}] }}"
  loop: "{{ current_credentials.assets.credentials }}"
  loop_control:
    loop_var: credential_item
# ignore_errors: true

- name: "DESIRED STATE: Show the currently existing credentials associated with it's organizations"
  debug:
    msg:
      - "Current credential: {{ current_info_for_credentials }}"
      - "CasC credentials: {{ controller_credentials }}"

- name: "DESIRED STATE: Show the credentials not in CasC"
  debug:
    msg:
      - "Credential name: {{ current_info_item_for_credentials.credential }}"
      - "Credential type: {{ current_info_item_for_credentials.credential_type }}"
      - "Credential organization name: {{ current_info_item_for_credentials.organization }}"
  vars:
    credential_index: "{{ lookup('ansible.utils.index_of', data=controller_credentials, test='match', value='^'+current_info_item_for_credentials.credential+'$', key='name', fail_on_missing='true', wantlist=True) }}"
    credential_type_index: "{{ lookup('ansible.utils.index_of', data=controller_credentials, test='match', value='^'+current_info_item_for_credentials.credential_type+'$', key='credential_type', fail_on_missing='true', wantlist=True) }}"
    credential_organization_index: "{{ lookup('ansible.utils.index_of', data=controller_credentials, test='match', value='^'+current_info_item_for_credentials.organization+'$', key='organization', fail_on_missing='true', wantlist=True) }}"
  loop: "{{ current_info_for_credentials }}"
  loop_control:
    loop_var: current_info_item_for_credentials
  when:
    - current_info_item_for_credentials.organization is match('^'+orgs+'$')
    - ((credential_organization_index | intersect(credential_index)) | intersect(credential_type_index)) == []

- name: "DESIRED STATE: Remove the credentials not in CasC"
  ansible.controller.credential:
    controller_username:                "{{ controller_username | default(omit, true) }}"
    controller_password:                "{{ controller_password | default(omit, true) }}"
    controller_oauthtoken:              "{{ controller_oauthtoken | default(omit, true) }}"
    controller_host:                    "{{ controller_hostname | default(omit, true) }}"
    controller_config_file:             "{{ controller_config_file | default(omit, true) }}"
    validate_certs:                     "{{ controller_validate_certs | default(omit) }}"
    name: "{{ remove_credential_item.credential }}"
    credential_type: "{{ remove_credential_item.credential_type }}"
    organization: "{{ remove_credential_item.organization }}"
    state: absent
  vars:
    credential_index: "{{ lookup('ansible.utils.index_of', data=controller_credentials, test='match', value='^'+remove_credential_item.credential+'$', key='name', fail_on_missing='true', wantlist=True) }}"
    credential_type_index: "{{ lookup('ansible.utils.index_of', data=controller_credentials, test='match', value='^'+remove_credential_item.credential_type+'$', key='credential_type', fail_on_missing='true', wantlist=True) }}"
    credential_organization_index: "{{ lookup('ansible.utils.index_of', data=controller_credentials, test='match', value='^'+remove_credential_item.organization+'$', key='organization', fail_on_missing='true', wantlist=True) }}"
  loop: "{{ current_info_for_credentials }}"
  loop_control:
    loop_var: remove_credential_item
  when:
    - remove_credential_item.organization is match('^'+orgs+'$')
    - ((credential_organization_index | intersect(credential_index)) | intersect(credential_type_index)) == []
...
