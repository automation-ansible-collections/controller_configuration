---
- block:
  - name: "Read Groups definitions"
    include_vars:
      file: "{{ item.src }}"
    with_filetree: "{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_groups.d/"
    when: item.state == 'file'
    register: contents

  - name: "Populate Groups list"
    set_fact:
      populate_controller_groups: "{{ (populate_controller_groups | default([])) + item.ansible_facts.controller_groups }}"
    loop: "{{ contents.results }}"
    when: contents.results is defined and item.ansible_facts is defined

  - name: "Set Groups Data Structure"
    set_fact:
      controller_groups: "{{ populate_controller_groups }}"
    when: populate_controller_groups is defined

  when: orgs is defined and dir_orgs_vars is defined

- name: "DESIRED STATE: Get the current controller user to determine if it is super-admin"
  set_fact:
       __controller_api_current_user_check_is_admin: "{{ lookup('ansible.controller.controller_api', 'users', query_params={ 'username': controller_username },
         host=controller_hostname, username=controller_username, password=controller_password, verify_ssl=false) }}"
- block:

    - name: Get the organization ID
      set_fact:
        controller_organization_id: "{{ lookup('ansible.controller.controller_api', 'organizations', query_params={ 'name': orgs },
          host=controller_hostname, username=controller_username, password=controller_password, verify_ssl=false) }}"

    - name: "DESIRED STATE: Get the API list of all inventories"
      set_fact:
        __controller_api_inventories: "{{ query('ansible.controller.controller_api', 'inventories',
          query_params={
            'organization': controller_organization_id.id,
            'has_inventory_sources': 'false',
            'not__total_groups': '0',
            'not__kind': 'smart'
          },
          host=controller_hostname, username=controller_username,
          password=controller_password, verify_ssl=false) }}"

    - debug:
        msg: "{{ __controller_api_inventories }}"
      when: __controller_api_inventories is defined

    - name: "DESIRED STATE: Get the API list of all groups in the inventories at organization {{ orgs }}"
      set_fact:
        __controller_api_groups: "{{ (__controller_api_groups | default([])) + query('ansible.controller.controller_api', 'groups',
          query_params={ 'inventory': current_inventory.id },
          host=controller_hostname, username=controller_username,
          password=controller_password, verify_ssl=false) }}"
      loop: "{{ __controller_api_inventories }}"
      loop_control:
        loop_var: current_inventory

    - block:
        - debug:
            msg: "{{ __controller_api_groups }}"

        - name: "DESIRED STATE: Find the difference of Project between what is on the Controller versus CasC on SCM"
          set_fact:
            __groups_difference: "{{ lookup('redhat_cop.controller_casc.controller_object_diff_temp',
              query_params={ 'summary_fields.inventory.organization_id': controller_organization_id.id },
              api_list=__controller_api_groups, compare_list=controller_groups,
              with_present=false, set_absent=true ) }}"

        - name: "DESIRED STATE: Set the inventory key at the correct place"
          set_fact:
            controller_groups: "{{ __groups_difference }}"

        - debug:
            var: "{{ item }}"
          loop:
              - __groups_difference
              - controller_groups
          when:
              - __groups_difference is defined
              - controller_groups is defined

        - name: "DESIRED STATE: Configure Controller Groups"
          import_role:
            name: redhat_cop.controller_configuration.groups

      when: __controller_api_groups is defined

  when:
    - __controller_api_current_user_check_is_admin.is_superuser
...

