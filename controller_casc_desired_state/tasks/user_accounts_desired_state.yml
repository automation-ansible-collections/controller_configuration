---
# tasks file for controller_ldap_settings
- block:
  - name: "Read User Accounts definitions"
    include_vars:
      file: "{{ item.src }}"
    with_filetree: "{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_users.d/"
    when: item.state == 'file'
    register: contents

  - name: "Populate User Accounts list"
    set_fact:
      populate_controller_user_accounts: "{{ (populate_controller_user_accounts | default([])) + item.ansible_facts.controller_user_accounts }}"
    loop: "{{ contents.results }}"
    when: contents.results is defined and item.ansible_facts.controller_user_accounts is defined

  - name: "Set User Accounts Data Structure"
    set_fact:
      controller_user_accounts: "{{ populate_controller_user_accounts }}"
    when: populate_controller_user_accounts is defined

  when: orgs is defined and dir_orgs_vars is defined

- name: "DESIRED STATE: Get the current controller user to determine if it is super-admin"
  set_fact:
    __controller_api_current_user_check_is_admin: "{{ lookup('ansible.controller.controller_api', 'users', query_params={ 'username': controller_username },
      host=controller_hostname, username=controller_username, password=controller_password, verify_ssl=false) }}"

- name: "DESIRED STATE: Sets the current controller user to determine if it is super-admin"
  set_fact:
    __controller_api_user_accounts: "{{ query('ansible.controller.controller_api', 'users',
      host=controller_hostname, username=controller_username, password=controller_password, verify_ssl=false) }}"

- block:

    # - name: "Populate User Accounts list"
    #   set_fact:
    #     populate_controller_api_user_accounts_without_external_accounts: "{{ (populate_controller_api_user_accounts_without_external_accounts | default([])) + [__controller_api_user_accounts_item] }}"
    #   loop: "{{ __controller_api_user_accounts  }}"
    #   loop_control:
    #     loop_var: __controller_api_user_accounts_item
    #   when: __controller_api_user_accounts_item.external_account == None

    - name: "Populate User Accounts list"
      set_fact:
        populate_controller_api_user_accounts_without_external_accounts: "{{ __controller_api_user_accounts | selectattr('external_account', 'none') | list }}"

    - name: "Set User Accounts from API without External Accounts Data Structure"
      set_fact:
        __controller_api_user_accounts: "{{ populate_controller_api_user_accounts_without_external_accounts }}"
      when: populate_controller_api_user_accounts_without_external_accounts is defined

  when:
    - drop_user_external_accounts is defined
    - drop_user_external_accounts

- block:

    - name: "DESIRED STATE: Find the difference of User Accounts between what is on the Controller versus CasC on SCM"
      set_fact:
        __user_accounts_difference: "{{ lookup('redhat_cop.controller_casc.controller_object_diff_temp',
          api_list=__controller_api_user_accounts, compare_list=controller_user_accounts,
          with_present=false, set_absent=true ) }}"


    - name: "DESIRED STATE: Sets the difference of User Accounts between what is on the Controller versus CasC on SCM"
      set_fact:
        controller_user_accounts: "{{ __user_accounts_difference }}"

    # - name: "DESIRED STATE: Configure Controller User Accounts"
    #   import_role:
    #     name: redhat_cop.controller_configuration.users

  when:
    - __controller_api_current_user_check_is_admin.is_superuser

...
