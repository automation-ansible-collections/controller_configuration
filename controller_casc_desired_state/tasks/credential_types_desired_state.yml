---
# tasks file for controller_credential_types

- block:
  - name: "Read Credential_Types definitions"
    include_vars:
      file: "{{ item.src }}"
    with_filetree: "{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_credential_types.d/"
    when: item.state == 'file'
    register: contents

  - name: "Populate Credential_Types list"
    set_fact:
      populate_controller_credential_types: "{{ (populate_controller_credential_types | default([])) + item.ansible_facts.controller_credential_types }}"
    loop: "{{ contents.results }}"
    when: contents.results is defined and item.ansible_facts.controller_credential_types is defined

  - name: "Set Projects Data Structure"
    set_fact:
      controller_credential_types: "{{ populate_controller_credential_types }}"
    when: populate_controller_credential_types is defined

  when: dir_orgs_vars is defined and orgs is defined and env is defined


- block:

    - name: Get the organization ID
      set_fact:
        __controller_organization_id: "{{ lookup('ansible.controller.controller_api', 'organizations', query_params={ 'name': orgs },
          host=controller_hostname, username=controller_username, password=controller_password, verify_ssl=false) }}"

    - name: "DESIRED STATE: Get the API list of all Projects {{ orgs }} Organization"
      set_fact:
        __controller_api_credential_types: "{{ query('ansible.controller.controller_api', 'credential_types',
          query_params={ 'organization': __controller_organization_id.id },
          host=controller_hostname, username=controller_username, password=controller_password, verify_ssl=false) }}"

    - debug:
        msg: "{{ __controller_api_credential_types  }}"
      when: __controller_api_credential_types is defined

    - name: "DESIRED STATE: Find the difference of Project between what is on the Controller versus CasC on SCM"
      set_fact:
        __credential_types_difference: "{{ lookup('redhat_cop.controller_casc.controller_object_diff_temp',
          api_list=__controller_api_credential_types, compare_list=controller_credential_types,
          with_present=false, set_absent=true ) }}"

    - debug:
        var: "{{ item }}"
      loop:
          - __credential_types_difference

    - name: "DESIRED STATE: Set credential's list to be configured"
      set_fact:
        controller_credential_types: "{{ __credential_types_difference }}"







#- name: "DESIRED STATE: Get the current controller credential types"
#  ansible.controller.export:
#    controller_username:                "{{ controller_username | default(omit, true) }}"
#    controller_password:                "{{ controller_password | default(omit, true) }}"
#    controller_oauthtoken:              "{{ controller_oauthtoken | default(omit, true) }}"
#    controller_host:                    "{{ controller_hostname | default(omit, true) }}"
#    controller_config_file:             "{{ controller_config_file | default(omit, true) }}"
#    validate_certs:                     "{{ controller_validate_certs | default(omit) }}"
#    credential_types: 'all'
#  register: current_credential_types
#
#- name: "DESIRED STATE: Show the currently existing credential types"
#  debug:
#    var: current_credential_types
#
#- name: "DESIRED STATE: Show the credential types not in CasC"
#  debug:
#    msg:
#      - "{{ credential_type_item.name if credential_type_item.name not in (controller_credential_types | map(attribute='name') | list) }}"
#  when: (credential_type_item.name if credential_type_item.name not in (controller_credential_types | map(attribute='name') | list) else false)
#  loop: "{{ current_credential_types.assets.credential_types }}"
#  loop_control:
#    loop_var: credential_type_item
#
#- name: "DESIRED STATE: Remove the credential types not in CasC"
#  ansible.controller.credential_type:
#    controller_username:                "{{ controller_username | default(omit, true) }}"
#    controller_password:                "{{ controller_password | default(omit, true) }}"
#    controller_oauthtoken:              "{{ controller_oauthtoken | default(omit, true) }}"
#    controller_host:                    "{{ controller_hostname | default(omit, true) }}"
#    controller_config_file:             "{{ controller_config_file | default(omit, true) }}"
#    validate_certs:                     "{{ controller_validate_certs | default(omit) }}"
#    name: "{{ remove_credential_type_item.name }}"
#    description: "{{ remove_credential_type_item.description }}"
#    state: absent
#  when: (remove_credential_type_item.name if remove_credential_type_item.name not in (controller_credential_types | map(attribute='name') | list) else false)
#  loop: "{{ current_credential_types.assets.credential_types }}"
#  loop_control:
#    loop_var: remove_credential_type_item

...
