---
- block:
  - name: "Read Workflow Job Template Nodes definitions"
    include_vars:
      file: "{{ item.src }}"
    with_filetree: "{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_workflow_job_template_nodes.d/"
    when: item.state == 'file'
    register: contents

  - name: "Populate Workflow Job Template Nodes list"
    set_fact:
      populate_controller_workflow_job_template_nodes: "{{ (populate_controller_workflow_job_template_nodes | default([])) + item.ansible_facts.controller_workflow_nodes }}"
    loop: "{{ contents.results }}"
    when: contents.results is defined and item.ansible_facts.controller_workflow_nodes is defined

  - name: "Set Workflow Job Template Nodes definitions"
    set_fact:
      controller_workflow_nodes: "{{ populate_controller_workflow_job_template_nodes }}"
    when: populate_controller_workflow_job_template_nodes is defined

  when: orgs is defined and dir_orgs_vars is defined

- name: "DESIRED STATE: Get the API list of all Workflow Job Template Nodes"
  set_fact:
    __controller_api_workflow_job_template_nodes: "{{ query('ansible.controller.controller_api', 'workflow_job_template_nodes',
      host=controller_hostname, username=controller_username,
      password=controller_password, verify_ssl=false) }}"
- block:
    - debug:
        var: "{{ item }}"
      loop:
          - __controller_api_workflow_job_template_nodes

    - name: "DESIRED STATE: Find the difference of Workflow Job Templates Nodes between what is on the Controller versus CasC on SCM"
      set_fact:
        __workflow_job_template_nodes_difference: "{{ lookup('redhat_cop.controller_casc.controller_object_diff_temp',
          api_list=__controller_api_workflow_job_template_nodes, compare_list=controller_workflow_nodes,
          with_present=false, set_absent=true ) }}"

    - debug:
        var: "{{ item }}"
      loop:
          - __workflow_job_template_nodes_difference

    - name: "DESIRED STATE: Set job_template's list to be configured"
      set_fact:
        controller_workflow_nodes: "{{ __workflow_job_template_nodes_difference }}"

    #- name: "DESIRED STATE: Configure Controller Workflow Job Template Nodes"
    #  import_role:
    #    name: redhat_cop.controller_configuration.workflow_job_templates
    #    #name: redhat_cop.controller_casc.controller_casc_implementation
    #    tasks_from: add_workflows_schema.yml


    - name: "Create tower Workflow job template nodes"
      ansible.controller.workflow_job_template_node:
        identifier:                     "{{ __workflow_loop_node_item.identifier | mandatory }}"   # internal identification ID
        extra_data:                     "{{ __workflow_loop_node_item.extra_data | default(omit, true) }}"
        inventory:                      "{{ __workflow_loop_node_item.inventory | default(omit, true) }}"
        scm_branch:                     "{{ __workflow_loop_node_item.scm_branch | default(omit, true) }}"
        job_type:                       "{{ __workflow_loop_node_item.job_type | default(omit, true) }}"
        job_tags:                       "{{ __workflow_loop_node_item.job_tags | default(omit, true) }}"
        skip_tags:                      "{{ __workflow_loop_node_item.skip_tags | default(omit, true) }}"
        limit:                          "{{ __workflow_loop_node_item.limit | default(omit, true) }}"
        diff_mode:                      "{{ __workflow_loop_node_item.diff_mode | default (omit) }}"
        verbosity:                      "{{ __workflow_loop_node_item.verbosity | default(omit, true) }}"
        credentials:                    "{{ __workflow_loop_node_item.credentials | default(__workflow_loop_node_item.related.credentials | default([]) | map(attribute='name') | list ) }}"
        workflow_job_template:          "{{ __workflow_loop_node_item.workflow_job_template.name | default( __workflow_loop_node_item.workflow_job_template | default(omit, true) ) }}"
        unified_job_template:           "{{ __workflow_loop_node_item.unified_job_template.name | default( __workflow_loop_node_item.unified_job_template | default(omit, true)) }}"  # Run Job template
        approval_node:                  "{{ __workflow_loop_node_item.approval_node | default(omit, true) }}"
        workflow:                       "{{ __workflow_loop_node_item.workflow_job_template | mandatory }}"
        state:                          "{{ __workflow_loop_node_item.state | default(controller_state | default('present')) }}"
        all_parents_must_converge:      "{{ __workflow_loop_node_item.all_parents_must_converge | default ('false') }}"
        organization:                   "{{ __workflow_loop_node_item.organization | default(omit) }}"  # Workflow job template organization

        # Role Standard Options
        controller_username:            "{{ controller_username | default(omit, true) }}"
        controller_password:            "{{ controller_password | default(omit, true) }}"
        controller_oauthtoken:          "{{ controller_oauthtoken | default(omit, true) }}"
        controller_host:                "{{ controller_hostname | default(omit, true) }}"
        controller_config_file:         "{{ controller_config_file | default(omit, true) }}"
        validate_certs:                 "{{ controller_validate_certs | default(omit) }}"
      loop: "{{ controller_workflow_nodes }}"
      loop_control:
        loop_var: __workflow_loop_node_item
      no_log: false

    - name: "Create links between Workflow job template nodes"
      ansible.controller.workflow_job_template_node:
        identifier:                     "{{ __workflow_loop_node_item.identifier | mandatory }}"
        workflow:                       "{{ __workflow_loop_node_item.workflow_job_template | mandatory }}"
        always_nodes:                   "{{ __workflow_loop_node_item.always_nodes | default( __workflow_loop_node_item.related.always_nodes | default([], true) | selectattr('identifier', 'defined') | map(attribute='identifier')) }}"  # Nodes to advance on success (green links) # noqa 204
        success_nodes:                  "{{ __workflow_loop_node_item.success_nodes | default( __workflow_loop_node_item.related.success_nodes | default([], true) | selectattr('identifier', 'defined') | map(attribute='identifier')) }}"  # Nodes to advance on success (green links) # noqa 204
        failure_nodes:                  "{{ __workflow_loop_node_item.failure_nodes | default( __workflow_loop_node_item.related.failure_nodes | default([], true) | selectattr('identifier', 'defined') | map(attribute='identifier')) }}"  # Nodes to advance on success (green links) # noqa 204
        state:                          "{{ __workflow_loop_node_item.state | default(controller_state | default('present')) }}"
        organization:                   "{{ __workflow_loop_node_item.organization | default(omit) }}"  # Workflow job template organization
        controller_username:            "{{ controller_username | default(omit, true) }}"
        controller_password:            "{{ controller_password | default(omit, true) }}"
        controller_oauthtoken:          "{{ controller_oauthtoken | default(omit, true) }}"
        controller_host:                "{{ controller_hostname | default(omit, true) }}"
        controller_config_file:         "{{ controller_config_file | default(omit, true) }}"
        validate_certs:                 "{{ controller_validate_certs | default(omit) }}"
      loop: "{{ controller_workflow_nodes }}"
      loop_control:
        loop_var: __workflow_loop_node_item
      no_log: false
      # Execute only the nodes that define links to the following
      when: ((__workflow_loop_node_item.always_nodes is defined and __workflow_loop_node_item.always_nodes | length > 0 ) or
            (__workflow_loop_node_item.success_nodes is defined and __workflow_loop_node_item.success_nodes | length > 0 ) or
            (__workflow_loop_node_item.failure_nodes is defined and __workflow_loop_node_item.failure_nodes | length > 0 ))

  when: __controller_api_workflow_job_template_nodes is defined
...
